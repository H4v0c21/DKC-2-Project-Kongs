sprite_addresses = [
	0xD8B1F0,
	0xD8B46C,
	0xD8B6E8,
	0xD8B964,
	0xD8BBE0,
	0xD8BE9A,
	0xD8C154,
	0xD8C40E,
	0xD8C684,
	0xD8C922,
	0xD8CBA4,
	0xD8CE42,
	0xD8D0E0,
	0xD8D37E,
	0xD8D61C,
	0xD8D8BA,
	0xD8DB58,
	0xD8DDF6,
	0xD8E094,
	0xD8E332,
	0xD8E5D0,
	0xCD0000,
	0xCD02BA,
	0xCD0574,
	0xCD0850,
	0xCD0B2C,
	0xCD0E08,
	0xCD1106,
	0xCD13E8,
	0xCD16C4,
	0xCD197E,
	0xCD1C38,
	0xCD1ED6,
	0xCD2196,
	0xCD2472,
	0xCD272C,
	0xCD29E6,
	0xCD2CA0,
	0xCD2F7C,
	0xCD327A,
	0xCD3534,
	0xF81688,
	0xF81964,
	0xF81C46,
	0xF81F88,
	0xF822CA,
	0xF8262E,
	0xF829B4,
	0xF82D34,
	0xF830B4,
	0xF83434,
	0xF837BA,
	0xF83B62,
	0xF83EE8,
	0xF84224,
	0xF84500,
	0xF8477C,
	0xF84A3C,
	0xF84CE0,
	0xF84F9A,
	0xF85254,
	0xF27696,
	0xF27972,
	0xC4ACAA,
	0xC4AF42,
	0xC4B202,
	0xC4B4A0,
	0xC4B722,
	0xC4B99E,
	0xC4BC1A,
	0xC4BEB8,
	0xC4C19A,
	0xC4C438,
	0xC4C64E,
	0xC4C88C,
	0xC4CB08,
	0xC4CE06,
	0xC4D0E8,
	0xC4D3EC,
	0xC4D6B2,
	0xC4D988,
	0xC4DC48,
	0xC4DF08,
	0xC4E1C2,
	0xC4E49E,
	0xC4E7BE,
	0xC4EA62,
	0xC4ED4A,
	0xC4F004,
	0xC4F2E0,
	0xC4F5C2,
	0xC4F8C0,
	0xC4FB36,
	0xF640CE,
	0xF6436C,
	0xF64648,
	0xF64902,
	0xF64BDE,
	0xF64E98,
	0xF65136,
	0xF653CE,
	0xF6564A,
	0xF658E8,
	0xF65B86,
	0xF65E24,
	0xF660C2,
	0xF6633E,
	0xF665FE,
	0xF668BE,
	0xF66B5C,
	0xF66DFA,
	0xF67054,
	0xF672AE,
	0xF67508,
	0xF67784,
	0xF67A00,
	0xF67C98,
	0xD7124C,
	0xD714A6,
	0xD71782,
	0xD71A80,
	0xD71D5C,
	0xD7207C,
	0xD723DA,
	0xD72716,
	0xD72A52,
	0xD72D8E,
	0xD730CA,
	0xD70000,
	0xD70254,
	0xD704AE,
	0xD70708,
	0xD709EA,
	0xD70CAA,
	0xD70F6A,
	0xFB3BDA,
	0xFB3E94,
	0xFB4170,
	0xFB444C,
	0xFB476C,
	0xFB4AA8,
	0xFB4DA0,
	0xFB507C,
	0xFB5314,
	0xFB55AC,
	0xFB58AA,
	0xFB5B86,
	0xFB5E62,
	0xFB613E,
	0xFB647A,
	0xC9BAC7,
	0xC9BDA9,
	0xC9C0AD,
	0xC9C3CD,
	0xC9C6AF,
	0xC9C9D5,
	0xC9CD5B,
	0xC9D0A9,
	0xC9D46D,
	0xC9D7D1,
	0xC9DB3B,
	0xC9DEBB,
	0xC9E1E7,
	0xC9E50D,
	0xC9E85B,
	0xC9EC03,
	0xC9EFA5,
	0xC9F309,
	0xC9F607,
	0xD7620A,
	0xD7646A,
	0xD766E6,
	0xD76984,
	0xD76C82,
	0xD76FE6,
	0xD772F0,
	0xD77632,
	0xD77952,
	0xD77CB6,
	0xD77FD6,
	0xD782FC,
	0xD78600,
	0xD78948,
	0xD78C2A,
	0xD78EEA,
	0xD79188,
	0xD79426,
	0xD796E0,
	0xD7995C,
	0xFD3780,
	0xFD39FC,
	0xFD3C9A,
	0xFD3F38,
	0xFD4192,
	0xFD43EC,
	0xFD468A,
	0xFD4906,
	0xFD4B60,
	0xFD4DBA,
	0xFD5014,
	0xFD5290,
	0xFD5550,
	0xFD580A,
	0xFD5AA2,
	0xFD5D1E,
	0xFD5F9A,
	0xFD6216,
	0xFD6470,
	0xFD66CA,
	0xFD6924,
	0xFD6B7E,
	0xFD6DD8,
	0xFD7054,
	0xE89A2A,
	0xE89D28,
	0xE8A048,
	0xE8A346,
	0xE8A5C2,
	0xE8A81C,
	0xE8AA54,
	0xE8ACD0,
	0xE8AFB2,
	0xE8B272,
	0xE8B5EC,
	0xE8B922,
	0xE8BC5E,
	0xE8BFC2,
	0xE8C326,
	0xE8C662,
	0xE8C960,
	0xE8CCA8,
	0xE8D006,
	0xE8D34E,
	0xE8D68A,
	0xE8D9C6,
	0xC5E840,
	0xC5E520,
	0xC5E228,
	0xC5DF30,
	0xC5DC54,
	0xC5D934,
	0xC5D60E,
	0xC5D2C6,
	0xC5D044,
	0xC5CE28,
	0xC5CB4C,
	0xC5C848,
	0xC5C4CE,
	0xEA020B,
	0xCD392E,
	0xCD3C4E,
	0xCD3EEC,
	0xCD4124,
	0xCD433A,
	0xCD4550,
	0xCD476C,
	0xCD49C6,
	0xCD4C04,
	0xCD4E58,
	0xCD50AC,
	0xCD5300,
	0xCD5538,
	0xCD5770,
	0xCD5986,
	0xCD5B9C,
	0xCD5DF6,
	0xCD602E,
	0xF376FA,
	0xF37992,
	0xF37BE6,
	0xF37E3A,
	0xF380B6,
	0xF3830A,
	0xF38542,
	0xF38764,
	0xF38958,
	0xF38B90,
	0xF38DEA,
	0xF39044,
	0xF392C0,
	0xF39558,
	0xCC091C,
	0xCC0C20,
	0xCC0EE0,
	0xCC1184,
	0xCC1400,
	0xCC16BA,
	0xCC19DA,
	0xCC1C9A,
	0xCC1F5A,
	0xCC223C,
	0xCC2518,
	0xCC279A,
	0xCC2A7C,
	0xCC2DB8,
	0xCC30FA,
	0xD483EC,
	0xD48608,
	0xD48846,
	0xF3A8E4,
	0xF3AB82,
	0xF3AE20,
	0xF3B0DA,
	0xF3B394,
	0xF3B64E,
	0xF3B8EC,
	0xF3BB8A,
	0xF3BE28,
	0xE16D05,
	0xE17041,
	0xE17361,
	0xE1769D,
	0xE179D9,
	0xE17D15,
	0xE18051,
	0xE183B5,
	0xE18713,
	0xE18A55,
	0xE18D6F,
	0xE190AB,
	0xD276FE,
	0xD2797A,
	0xD27C3A,
	0xD27EB6,
	0xD2812C,
	0xD283CA,
	0xD28668,
	0xD66AE8,
	0xD66D64,
	0xD66FE0,
	0xDE1F92,
	0xDE222A,
	0xDE2506,
	0xDE27C0,
	0xDE2A74,
	0xDE2D0C,
	0xDE2FCC,
	0xDE324E,
	0xDE34CA,
	0xDE3746,
	0xDE39E4,
	0xDE3CA4,
	0xDE3F64,
	0xDE4224,
	0xDE44E4,
	0xDE47A4,
	0xDE4A80,
	0xDE4D5C,
	0xDE5038,
	0xDE5314,
	0xDE55F0,
	0xDE58CC,
	0xD73406,
	0xD736C0,
	0xD7397A,
	0xD73C18,
	0xD73F54,
	0xD7431E,
	0xD746E2,
	0xD74A4C,
	0xD74DB0,
	0xD75076,
	0xD75336,
	0xD75612,
	0xDC9252,
	0xDC95D2,
	0xDC9952,
	0xDC9CD2,
	0xDCA030,
	0xDCA3B0,
	0xDCA6EC,
	0xDCAA28,
	0xDCAD64,
	0xDCB084,
	0xDCB3A4,
	0xDCB6A2,
	0xDCB97E,
	0xDCBC7C,
	0xDCBF36,
	0xDCC1CE,
	0xDCC488,
	0xDCC742,
	0xDCC9E0,
	0xDCCC78,
	0xDCCF10,
	0xDCD1A8,
	0xDCD440,
	0xDCD6B6,
	0xDCD92C,
	0xDCDBA2,
	0xDCDE18,
	0xDCE050,
	0xDCE288,
	0xDCE4E8,
	0xDCE764,
	0xF13D10,
	0xF13FEC,
	0xF142C8,
	0xDE6B28,
	0xDE6C78,
	0xDE6DC8,
	0xDE6F18,
	0xDE7068,
	0xDE71B8,
	0xDE7308,
	0xDE7458,
	0xDE75EC,
	0xDE775E,
	0xDE78D0,
	0xDE7A42,
	0xDE7BB4,
	0xDE7D04,
	0xDE7E54,
	0xDE7FA4,
	0xDE80F4,
	0xDE66B0,
	0xDE6822,
	0xDE6994,
	0xDC869A,
	0xDC888E,
	0xDC8A82,
	0xDC8C76,
	0xDC8E6A,
	0xDC9080,
	0xDC7868,
	0xDC7A7E,
	0xDC7C94,
	0xDC7ECC,
	0xDC8142,
	0xDC83FC,
	0xCC0640,
	0xE5775B,
	0xE57A37,
	0xE57CF7,
	0xE57FB1,
	0xE58233,
	0xE584D1,
	0xE587CF,
	0xE58AE9,
	0xE58DA3,
	0xE58FFD,
	0xE56A07,
	0xE56C61,
	0xE56EFF,
	0xE571BF,
	0xE5747F
]

def read_byte(data, address):
	byte = int.from_bytes(data[address:address+1], byteorder='big')
	return byte

def snes_to_rom_address(address):
	address &= 0x3FFFFF
	return address

def load_file(path):
	try:
		file = open(path, 'rb')
		while True:
			data = file.read(-1)  
			if not data:
				break
			return bytes(data)
	except IOError:
		print('ERROR: Failed to open file.')
		return bytes()

def save_file(path, address, data):
	try:
		file = open(path, 'wb')
		if True:
			file.seek(address)
			file.write(data)
			return
	except IOError:
		print('ERROR: Failed to open file.')
		return
		
def get_data_chunk(data, address_a, address_b):
	chunk = data[address_a:address_b]
	return chunk

byte_row_width = 8
rom_path = 'dkc.sfc'
rom_data = load_file(rom_path)

with open('output.asm', 'a') as output_file:
	for sprite_address in sprite_addresses:
		sprite_address_label = sprite_address
		sprite_address = snes_to_rom_address(sprite_address)
		
		big_tile_count = int.from_bytes(rom_data[sprite_address:sprite_address+1], byteorder='big')
		small_tile_set_1_count = int.from_bytes(rom_data[sprite_address+1:sprite_address+2], byteorder='big')
		small_tile_set_1_offset = int.from_bytes(rom_data[sprite_address+2:sprite_address+3], byteorder='big')
		small_tile_set_2_count = int.from_bytes(rom_data[sprite_address+3:sprite_address+4], byteorder='big')
		small_tile_set_2_offset = int.from_bytes(rom_data[sprite_address+4:sprite_address+5], byteorder='big')
		small_tile_set_3_offset = int.from_bytes(rom_data[sprite_address+5:sprite_address+6], byteorder='big')
		small_tile_set_3_vram_offset = int.from_bytes(rom_data[sprite_address+6:sprite_address+7], byteorder='big')
		small_tile_set_3_count = int.from_bytes(rom_data[sprite_address+7:sprite_address+8], byteorder='big')

		size = 8

		size += big_tile_count * 16 * 16 // 2 + (big_tile_count * 2)
		size += small_tile_set_1_count * 8 * 8 // 2 + (small_tile_set_1_count * 2)
		size += small_tile_set_2_count * 8 * 8 // 2 + (small_tile_set_2_count * 2)
		size += small_tile_set_3_count * 8 * 8 // 2 + (small_tile_set_3_count * 2)

		data_block = get_data_chunk(rom_data, sprite_address, sprite_address + size)
		
		if len(data_block) != 0:
			#print('\nKIDDY_SPRITE_' + format(sprite_address_label, '06x').upper()[0:] + ':')
			output_file.write('\nDONKEY_SPRITE_' + format(sprite_address_label, '06x').upper()[0:] + ':')
			output_file.write('\n')
			
		for j in range(len(data_block) // byte_row_width):	#for every full row of 8 bytes in data_block
			line = '	db '
			row_address = j * byte_row_width
			
			for k in range(byte_row_width):	#for every byte in the 8 byte row
			
				byte_value = read_byte(data_block, row_address + k)
				
				if k == 0:
					line += '$' + format(byte_value, '02x').upper()

				else:
					line += ', $' + format(byte_value, '02x').upper()

			output_file.write(line)
			output_file.write('\n')
		
		if len(data_block) % byte_row_width != 0:
			line = '	db '
			for l in range(len(data_block) % byte_row_width):	#for the last row of bytes in data_block
				byte_value = read_byte(data_block, (len(data_block) // 8) * 8 + l)
				
				if l == 0:
					line += '$' + format(byte_value, '02x').upper()
				else:
					line += ', $' + format(byte_value, '02x').upper()
			output_file.write(line)
			output_file.write('\n')
